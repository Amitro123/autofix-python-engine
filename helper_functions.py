"""
Auto - generated by AutoFix
Helper Functions Module for AutoFix Engine

Provides utility functions for common operations across the AutoFix system.
"""

import logging
from typing import Any, List, Dict, Optional

logger = logging.getLogger(__name__)


def calculate_sum(*args) -> float:
    """
    Calculate the sum of numbers (supports both individual args and list).
    
    Args:
        *args: Numbers to sum (can be individual numbers or a list)
        
    Returns:
        Sum of all numbers
    """
    try:
        # Handle both calculate_sum(5, 10) and calculate_sum([5, 10])
        if len(args) == 1 and isinstance(args[0], (list, tuple)):
            return sum(args[0])
        else:
            return sum(args)
    except (TypeError, ValueError) as e:
        logger.error(f"Error calculating sum: {e}")
        return 0.0


def validate_file_path(file_path: str) -> bool:
    """
    Validate if a file path exists and is accessible.
    
    Args:
        file_path: Path to validate
        
    Returns:
        True if path is valid and accessible, False otherwise
    """
    import os
    try:
        return os.path.exists(file_path) and os.access(file_path, os.R_OK)
    except (OSError, TypeError):
        return False


def safe_dict_get(dictionary: Dict[str, Any], key: str, default: Any = None) -> Any:
    """
    Safely get a value from a dictionary with error handling.
    
    Args:
        dictionary: Dictionary to search
        key: Key to look for
        default: Default value if key not found
        
    Returns:
        Value from dictionary or default
    """
    try:
        return dictionary.get(key, default)
    except (AttributeError, TypeError):
        return default